{"ast":null,"code":"var _jsxFileName = \"/Users/viv/Desktop/facerecognitionbrain/facerecognitionbrain/src/components/CreateParticles/CreateParticles.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\n// import { loadSlim } from \"tsparticles-slim\";\nimport { loadFull } from \"tsparticles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateParticles = () => {\n  _s();\n  const particlesInit = useCallback(async engine => {\n    console.log(engine);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    //await loadFull(engine);\n    await loadFull(engine);\n  }, []);\n  const particlesLoaded = useCallback(async container => {\n    await console.log(container);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Particles, {\n    className: \"particles\",\n    id: \"tsparticles\",\n    init: particlesInit,\n    loaded: particlesLoaded,\n    options: {\n      // background: {\n      //   color: {\n      //     value: \"#0d47a1\",\n      //   },\n      // },\n      fpsLimit: 120,\n      interactivity: {\n        events: {\n          onClick: {\n            enable: true,\n            mode: \"push\"\n          },\n          onHover: {\n            enable: true,\n            mode: \"repulse\"\n          },\n          resize: true\n        },\n        modes: {\n          push: {\n            quantity: 4\n          },\n          repulse: {\n            distance: 200,\n            duration: 0.4\n          }\n        }\n      },\n      particles: {\n        color: {\n          value: \"#ffffff\"\n        },\n        links: {\n          color: \"#ffffff\",\n          distance: 150,\n          enable: true,\n          opacity: 0.5,\n          width: 1\n        },\n        move: {\n          direction: \"none\",\n          enable: true,\n          outModes: {\n            default: \"bounce\"\n          },\n          random: false,\n          speed: 6,\n          straight: false\n        },\n        number: {\n          density: {\n            enable: true,\n            area: 800\n          },\n          value: 80\n        },\n        opacity: {\n          value: 0.5\n        },\n        shape: {\n          type: \"circle\"\n        },\n        size: {\n          value: {\n            min: 1,\n            max: 5\n          }\n        }\n      },\n      detectRetina: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateParticles, \"PjleD03JXt5mR6AE5+SxrsWvXBc=\");\n_c = CreateParticles;\nexport default CreateParticles;\nvar _c;\n$RefreshReg$(_c, \"CreateParticles\");","map":{"version":3,"names":["React","useCallback","Particles","loadFull","jsxDEV","_jsxDEV","CreateParticles","_s","particlesInit","engine","console","log","particlesLoaded","container","className","id","init","loaded","options","fpsLimit","interactivity","events","onClick","enable","mode","onHover","resize","modes","push","quantity","repulse","distance","duration","particles","color","value","links","opacity","width","move","direction","outModes","default","random","speed","straight","number","density","area","shape","type","size","min","max","detectRetina","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/viv/Desktop/facerecognitionbrain/facerecognitionbrain/src/components/CreateParticles/CreateParticles.js"],"sourcesContent":["import React, { useCallback } from \"react\";\nimport Particles from \"react-tsparticles\";\n// import { loadSlim } from \"tsparticles-slim\";\nimport { loadFull } from \"tsparticles\";\n\nconst CreateParticles = () => {\n  const particlesInit = useCallback(async (engine) => {\n    console.log(engine);\n    // you can initiate the tsParticles instance (engine) here, adding custom shapes or presets\n    // this loads the tsparticles package bundle, it's the easiest method for getting everything ready\n    // starting from v2 you can add only the features you need reducing the bundle size\n    //await loadFull(engine);\n    await loadFull(engine);\n  }, []);\n\n  const particlesLoaded = useCallback(async (container) => {\n    await console.log(container);\n  }, []);\n\n  return (\n    <Particles\n      className=\"particles\"\n      id=\"tsparticles\"\n      init={particlesInit}\n      loaded={particlesLoaded}\n      options={{\n        // background: {\n        //   color: {\n        //     value: \"#0d47a1\",\n        //   },\n        // },\n        fpsLimit: 120,\n        interactivity: {\n          events: {\n            onClick: {\n              enable: true,\n              mode: \"push\",\n            },\n            onHover: {\n              enable: true,\n              mode: \"repulse\",\n            },\n            resize: true,\n          },\n          modes: {\n            push: {\n              quantity: 4,\n            },\n            repulse: {\n              distance: 200,\n              duration: 0.4,\n            },\n          },\n        },\n        particles: {\n          color: {\n            value: \"#ffffff\",\n          },\n          links: {\n            color: \"#ffffff\",\n            distance: 150,\n            enable: true,\n            opacity: 0.5,\n            width: 1,\n          },\n          move: {\n            direction: \"none\",\n            enable: true,\n            outModes: {\n              default: \"bounce\",\n            },\n            random: false,\n            speed: 6,\n            straight: false,\n          },\n          number: {\n            density: {\n              enable: true,\n              area: 800,\n            },\n            value: 80,\n          },\n          opacity: {\n            value: 0.5,\n          },\n          shape: {\n            type: \"circle\",\n          },\n          size: {\n            value: { min: 1, max: 5 },\n          },\n        },\n        detectRetina: true,\n      }}\n    />\n  );\n};\n\nexport default CreateParticles;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,SAAS,MAAM,mBAAmB;AACzC;AACA,SAASC,QAAQ,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,aAAa,GAAGP,WAAW,CAAC,MAAOQ,MAAM,IAAK;IAClDC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB;IACA;IACA;IACA;IACA,MAAMN,QAAQ,CAACM,MAAM,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,eAAe,GAAGX,WAAW,CAAC,MAAOY,SAAS,IAAK;IACvD,MAAMH,OAAO,CAACC,GAAG,CAACE,SAAS,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA,CAACH,SAAS;IACRY,SAAS,EAAC,WAAW;IACrBC,EAAE,EAAC,aAAa;IAChBC,IAAI,EAAER,aAAc;IACpBS,MAAM,EAAEL,eAAgB;IACxBM,OAAO,EAAE;MACP;MACA;MACA;MACA;MACA;MACAC,QAAQ,EAAE,GAAG;MACbC,aAAa,EAAE;QACbC,MAAM,EAAE;UACNC,OAAO,EAAE;YACPC,MAAM,EAAE,IAAI;YACZC,IAAI,EAAE;UACR,CAAC;UACDC,OAAO,EAAE;YACPF,MAAM,EAAE,IAAI;YACZC,IAAI,EAAE;UACR,CAAC;UACDE,MAAM,EAAE;QACV,CAAC;QACDC,KAAK,EAAE;UACLC,IAAI,EAAE;YACJC,QAAQ,EAAE;UACZ,CAAC;UACDC,OAAO,EAAE;YACPC,QAAQ,EAAE,GAAG;YACbC,QAAQ,EAAE;UACZ;QACF;MACF,CAAC;MACDC,SAAS,EAAE;QACTC,KAAK,EAAE;UACLC,KAAK,EAAE;QACT,CAAC;QACDC,KAAK,EAAE;UACLF,KAAK,EAAE,SAAS;UAChBH,QAAQ,EAAE,GAAG;UACbR,MAAM,EAAE,IAAI;UACZc,OAAO,EAAE,GAAG;UACZC,KAAK,EAAE;QACT,CAAC;QACDC,IAAI,EAAE;UACJC,SAAS,EAAE,MAAM;UACjBjB,MAAM,EAAE,IAAI;UACZkB,QAAQ,EAAE;YACRC,OAAO,EAAE;UACX,CAAC;UACDC,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE,CAAC;UACRC,QAAQ,EAAE;QACZ,CAAC;QACDC,MAAM,EAAE;UACNC,OAAO,EAAE;YACPxB,MAAM,EAAE,IAAI;YACZyB,IAAI,EAAE;UACR,CAAC;UACDb,KAAK,EAAE;QACT,CAAC;QACDE,OAAO,EAAE;UACPF,KAAK,EAAE;QACT,CAAC;QACDc,KAAK,EAAE;UACLC,IAAI,EAAE;QACR,CAAC;QACDC,IAAI,EAAE;UACJhB,KAAK,EAAE;YAAEiB,GAAG,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAE;QAC1B;MACF,CAAC;MACDC,YAAY,EAAE;IAChB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEN,CAAC;AAACnD,EAAA,CA3FID,eAAe;AAAAqD,EAAA,GAAfrD,eAAe;AA6FrB,eAAeA,eAAe;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}