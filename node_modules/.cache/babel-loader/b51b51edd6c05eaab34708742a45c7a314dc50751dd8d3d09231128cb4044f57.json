{"ast":null,"code":"const isObject = val => typeof val === \"object\" && val !== null;\nexport function deepCompare(obj1, obj2, excludeKeyFn = () => false) {\n  if (!isObject(obj1) || !isObject(obj2)) {\n    return obj1 === obj2;\n  }\n  const keys1 = Object.keys(obj1).filter(key => !excludeKeyFn(key)),\n    keys2 = Object.keys(obj2).filter(key => !excludeKeyFn(key));\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    console.log(\"key\");\n    const value1 = obj1[key],\n      value2 = obj2[key];\n    if (isObject(value1) && isObject(value2)) {\n      if (value1 === obj2 && value2 === obj1) {\n        continue;\n      }\n      if (!deepCompare(value1, value2, excludeKeyFn)) {\n        return false;\n      }\n    } else if (Array.isArray(value1) && Array.isArray(value2)) {\n      if (!deepCompareArrays(value1, value2, excludeKeyFn)) {\n        return false;\n      }\n    } else if (value1 !== value2) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction deepCompareArrays(arr1, arr2, excludeKeyFn) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    const val1 = arr1[i],\n      val2 = arr2[i];\n    if (Array.isArray(val1) && Array.isArray(val2)) {\n      if (!deepCompareArrays(val1, val2, excludeKeyFn)) {\n        return false;\n      }\n    } else if (isObject(val1) && isObject(val2)) {\n      if (!deepCompare(val1, val2, excludeKeyFn)) {\n        return false;\n      }\n    } else if (val1 !== val2) {\n      return false;\n    }\n  }\n  return true;\n}","map":{"version":3,"names":["isObject","val","deepCompare","obj1","obj2","excludeKeyFn","keys1","Object","keys","filter","key","keys2","length","console","log","value1","value2","Array","isArray","deepCompareArrays","arr1","arr2","i","val1","val2"],"sources":["/Users/viv/Desktop/facerecognitionbrain/facerecognitionbrain/node_modules/react-tsparticles/esm/Utils.js"],"sourcesContent":["const isObject = (val) => typeof val === \"object\" && val !== null;\nexport function deepCompare(obj1, obj2, excludeKeyFn = () => false) {\n    if (!isObject(obj1) || !isObject(obj2)) {\n        return obj1 === obj2;\n    }\n    const keys1 = Object.keys(obj1).filter(key => !excludeKeyFn(key)), keys2 = Object.keys(obj2).filter(key => !excludeKeyFn(key));\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        console.log(\"key\");\n        const value1 = obj1[key], value2 = obj2[key];\n        if (isObject(value1) && isObject(value2)) {\n            if (value1 === obj2 && value2 === obj1) {\n                continue;\n            }\n            if (!deepCompare(value1, value2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (Array.isArray(value1) && Array.isArray(value2)) {\n            if (!deepCompareArrays(value1, value2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (value1 !== value2) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction deepCompareArrays(arr1, arr2, excludeKeyFn) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        const val1 = arr1[i], val2 = arr2[i];\n        if (Array.isArray(val1) && Array.isArray(val2)) {\n            if (!deepCompareArrays(val1, val2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (isObject(val1) && isObject(val2)) {\n            if (!deepCompare(val1, val2, excludeKeyFn)) {\n                return false;\n            }\n        }\n        else if (val1 !== val2) {\n            return false;\n        }\n    }\n    return true;\n}\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAIC,GAAG,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAK,IAAI;AACjE,OAAO,SAASC,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEC,YAAY,GAAGA,CAAA,KAAM,KAAK,EAAE;EAChE,IAAI,CAACL,QAAQ,CAACG,IAAI,CAAC,IAAI,CAACH,QAAQ,CAACI,IAAI,CAAC,EAAE;IACpC,OAAOD,IAAI,KAAKC,IAAI;EACxB;EACA,MAAME,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,MAAM,CAACC,GAAG,IAAI,CAACL,YAAY,CAACK,GAAG,CAAC,CAAC;IAAEC,KAAK,GAAGJ,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAACK,MAAM,CAACC,GAAG,IAAI,CAACL,YAAY,CAACK,GAAG,CAAC,CAAC;EAC9H,IAAIJ,KAAK,CAACM,MAAM,KAAKD,KAAK,CAACC,MAAM,EAAE;IAC/B,OAAO,KAAK;EAChB;EACA,KAAK,MAAMF,GAAG,IAAIJ,KAAK,EAAE;IACrBO,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;IAClB,MAAMC,MAAM,GAAGZ,IAAI,CAACO,GAAG,CAAC;MAAEM,MAAM,GAAGZ,IAAI,CAACM,GAAG,CAAC;IAC5C,IAAIV,QAAQ,CAACe,MAAM,CAAC,IAAIf,QAAQ,CAACgB,MAAM,CAAC,EAAE;MACtC,IAAID,MAAM,KAAKX,IAAI,IAAIY,MAAM,KAAKb,IAAI,EAAE;QACpC;MACJ;MACA,IAAI,CAACD,WAAW,CAACa,MAAM,EAAEC,MAAM,EAAEX,YAAY,CAAC,EAAE;QAC5C,OAAO,KAAK;MAChB;IACJ,CAAC,MACI,IAAIY,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,IAAIE,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;MACrD,IAAI,CAACG,iBAAiB,CAACJ,MAAM,EAAEC,MAAM,EAAEX,YAAY,CAAC,EAAE;QAClD,OAAO,KAAK;MAChB;IACJ,CAAC,MACI,IAAIU,MAAM,KAAKC,MAAM,EAAE;MACxB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf;AACA,SAASG,iBAAiBA,CAACC,IAAI,EAAEC,IAAI,EAAEhB,YAAY,EAAE;EACjD,IAAIe,IAAI,CAACR,MAAM,KAAKS,IAAI,CAACT,MAAM,EAAE;IAC7B,OAAO,KAAK;EAChB;EACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACR,MAAM,EAAEU,CAAC,EAAE,EAAE;IAClC,MAAMC,IAAI,GAAGH,IAAI,CAACE,CAAC,CAAC;MAAEE,IAAI,GAAGH,IAAI,CAACC,CAAC,CAAC;IACpC,IAAIL,KAAK,CAACC,OAAO,CAACK,IAAI,CAAC,IAAIN,KAAK,CAACC,OAAO,CAACM,IAAI,CAAC,EAAE;MAC5C,IAAI,CAACL,iBAAiB,CAACI,IAAI,EAAEC,IAAI,EAAEnB,YAAY,CAAC,EAAE;QAC9C,OAAO,KAAK;MAChB;IACJ,CAAC,MACI,IAAIL,QAAQ,CAACuB,IAAI,CAAC,IAAIvB,QAAQ,CAACwB,IAAI,CAAC,EAAE;MACvC,IAAI,CAACtB,WAAW,CAACqB,IAAI,EAAEC,IAAI,EAAEnB,YAAY,CAAC,EAAE;QACxC,OAAO,KAAK;MAChB;IACJ,CAAC,MACI,IAAIkB,IAAI,KAAKC,IAAI,EAAE;MACpB,OAAO,KAAK;IAChB;EACJ;EACA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}